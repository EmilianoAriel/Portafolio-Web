---
import '../CSS/Navigate.css'
import Lenguaje from './Lenguaje.astro'
import ThemeToggle from './ThemeToggle.astro'
const { t } = Astro.props

---


<header class="nav-bar">
    <nav class="content-nav">
        
            <ul class="menu">
                <li><a class="link-nav" href="#proyectos" aria-label="proyectos">Proyectos</a></li>
    
                <li><a class="link-nav" href="#experiencia" aria-label="experiencia">Experiencia</a></li>
                
                <li><a class="link-nav" href="#habilidades" aria-label="habilidades">Habilidades</a></li>
        
                <li><a class="link-nav" href="#sobremi" aria-label="sobremi">Sobre Mi</a></li>
    
                <li><a class="link-nav" href="mailto:emilianoariel6@gmail.com" >Contacto</a></li>
            </ul>
    
            <ul class="menu-switch">
                <!-- <li> <Lenguaje /></li> -->
                <li><ThemeToggle /></li>
            </ul>
    
    </nav>

</header>
<script>
    document.addEventListener("DOMContentLoaded", () => {
      const sections = document.querySelectorAll("section")
      const navItems = document.querySelectorAll("header nav  a")
  
      const callback = (entries: any[]) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            navItems.forEach((item) => {
                if (item.getAttribute("aria-label")?.toLowerCase() === entry.target.id.toLowerCase()) {
            item.classList.add("text-blue-500");
          } else {
            item.classList.remove("text-blue-500");
          }
            })
          }
        })
      }
  
      const observer = new IntersectionObserver(callback, {
        root: null,
        rootMargin: "0px",
        threshold: 0.6,
      })
  
      sections.forEach((section) => {
        observer.observe(section)
      })
  
      // Cleanup function
      window.addEventListener("visibilitychange", () => {
    if (document.visibilityState === "hidden") {
      observer.disconnect();
    } else {
      sections.forEach((section) => observer.observe(section));
    }
  });
});
  </script>
  
  <style>
    .menu {
      animation: nav-shadown 1s linear both;
      animation-timeline: scroll();
      animation-range: 0 100px;
    }
  
    .menu {
      @apply dark:bg-gray-800/90 bg-white/50;
    }
  
    @keyframes nav-shadown {
      0% {
        @apply dark:bg-gray-800/0 bg-white/0;
      }
      to {
        @apply shadow-lg ring-1 backdrop-blur ring-white/10;
      }
    }
  </style>
  